import Button from "@/components/ui/Atoms/Button";
import { addInstructorFormSchema } from "@/validations";
import { yupResolver } from "@hookform/resolvers/yup";
import React, { useState } from "react";
import { useForm } from "react-hook-form";
import FormInput from "@/components/ui/Atoms/form/input/FormInput";

import {
  IAddIndividualInstructorFormProps,
  ICreateIndividualInstructorFormProps,
} from "@/types";
import { useSession } from "next-auth/react";
import {
  useCachedInstitutionById,
  useGetCoursesByInstituteId,
} from "@/server/queries";
import { IInstructorData } from "@/types/api";
import { generateUniquePassword, generateUsername } from "@/utils";
import Spinner from "@/components/ui/Atoms/Spinner";
import ShowCreatedDetailsDialog from "../../../dialogs/ShowCreatedDetailsDialog";
import MultipleSelector, { Option } from "@/components/custom/multi-select";
import toast from "react-hot-toast";
import { useS3Upload } from "@/hooks";

const CreateIndividualInstructorForm = ({
  individualInstructorFormHandler,
}: ICreateIndividualInstructorFormProps) => {
  const { uploadFile } = useS3Upload();
  const [instructorData, setInstructorData] = useState<IInstructorData>();
  const [selectedCourses, setSelectedCourses] = useState<Option[]>([]);
  const [showDetailsDialogToggle, setShowDetailsDialogToggle] =
    useState<boolean>(false);
  const { data: session } = useSession();
  const { data: courseData, isLoading } = useGetCoursesByInstituteId(
    session?.user.id
  );
  const getInstituteById = useCachedInstitutionById(session?.user.id);
  const coursesSelectOptions: Option[] = courseData?.courses.map((course) => {
    return {
      label: course.courseName,
      value: course.id,
    };
  }) as Option[];

  const {
    register,
    handleSubmit,
    reset,
    formState: { errors },
  } = useForm<IAddIndividualInstructorFormProps>({
    resolver: yupResolver(addInstructorFormSchema),
  });

  const onSubmit = async (data: IAddIndividualInstructorFormProps) => {
    let uploadUrl;
    let key;
    if (data.image?.length !== 0 && data.image) {
      uploadUrl = await uploadFile(
        data.image[0],
        "instructor",
        "profile-images"
      );
      key = uploadUrl.split("/").slice(3).join("/").split("?")[0];
    }

    const defaultPermissions =
      getInstituteById.data &&
      getInstituteById.data?.institute.instructorPermissions;
    const username = generateUsername(
      data.instructorName,
      getInstituteById.data?.institute.pageContent.heroSection
        .instituteUrl as string
    );
    const uniquePassword = generateUniquePassword(username);
    const payload: IInstructorData = {
      instituteId: session?.user.id,
      courseIds: selectedCourses.map((course) => course.value),
      email: data.email,
      password: uniquePassword,
      permissions: defaultPermissions!,
      username: username,
      profileImage:
        data.image?.length === 0
          ? {
              fileKey: "",
              fileName: "",
              fileType: "",
            }
          : {
              fileKey: key,
              fileName: data?.image && data?.image[0].name,
              fileType: data?.image && data?.image[0].type,
            },
      subscription: "free",
      title: data.instructorName,
      verified: false,
    };
    console.log("INSTRUCTOR PAYLOAD: ", payload);
    setInstructorData(payload);
    setShowDetailsDialogToggle((prevState) => !prevState);
    individualInstructorFormHandler(payload, payload.courseIds as string[]);
    reset();
    setSelectedCourses([]);
  };

  if (isLoading || getInstituteById.isLoading)
    return (
      <Spinner
        loadingText={`${
          isLoading ? "Fetching Courses" : "Fetching Instructors"
        }`}
      />
    );

  return (
    <>
      <form
        onSubmit={handleSubmit(onSubmit)}
        className="flex flex-col gap-[3.31rem]"
      >
        <FormInput
          register={register}
          labelText="Instructor Name"
          name="instructorName"
          placeholder="Name"
          errorMessage={errors?.instructorName?.message}
        />
        {/* username is autogenerated and therefore the input field for username is not required */}
        {/* <FormInput
          register={register}
          labelText="Username"
          name="username"
          placeholder="Username"
          errorMessage={errors?.username?.message}
        /> */}
        <FormInput
          register={register}
          labelText="Email"
          name="email"
          placeholder="Email"
          errorMessage={errors?.email?.message}
        />

        <MultipleSelector
          selectLabel="Courses"
          defaultOptions={coursesSelectOptions}
          maxSelected={5}
          onMaxSelected={(maxLimit: number) =>
            toast.error(`You can't select more than ${maxLimit}`)
          }
          onChange={(value) => setSelectedCourses(value)}
          placeholder="Select Courses."
          emptyIndicator={
            <p className="text-center text-lg leading-10 text-gray-600 dark:text-gray-400">
              no results found.
            </p>
          }
          value={selectedCourses}
        />

        {/* <FormInput
          register={register}
          labelText="Course"
          name="course"
          placeholder="course"
          inputType="select"
          selectOptions={coursesSelectOptions}
          errorMessage={errors?.course?.message}
        /> */}

        <div className="flex flex-col md:flex-row justify-between items-center gap-[5rem] md:gap-[24.06rem] pb-[4.94rem]">
          <FormInput
            labelText="Add Image (optional)"
            name="image"
            register={register}
            inputType="file"
            placeholder="Add Image"
            fileUploadType={["image/png", "image/jpeg"]}
          />
          <Button className="w-[12.8125rem]" btnColor="purple" type="submit">
            Add Instructor
          </Button>
        </div>
      </form>

      <ShowCreatedDetailsDialog
        setDialogToggle={setShowDetailsDialogToggle}
        dialogToggle={showDetailsDialogToggle}
        dialogTitle="Generated Instructor's details. These details will not be visible again. Make sure to copy its content."
        dialogDescription={JSON.stringify(instructorData, null, 2)}
      />
    </>
  );
};

export default CreateIndividualInstructorForm;
